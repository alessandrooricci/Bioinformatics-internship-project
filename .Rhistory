View(not_log)
not_log <- not_log %>%
dplyr::select(-UNIPROT,-Genes)
boxplot(not_log)
data_to_log <- read_tsv("./data/dataset_cml_filtered.tsv")
logaritmic_data <- data_to_log %>%
dplyr::select(-UNIPROT, -Genes) %>%
mutate(across(everything(), ~log2(. + 1)))
View(logaritmic_data)
boxplot(data_to_log)
boxplot(logaritmic_data)
write_tsv(not_log, "./data/not_log_dataframe.tsv")
write_tsv(logaritmic_data, "./data/log_dataframe.tsv")
not_log <- read_tsv("./data/not_log_dataframe.tsv")
boxplot(not_log)
boxplot(logaritmic_data)
data_to_log <- read_tsv("./data/log_dataframe.tsv")
boxplot(logaritmic_data)
boxplot(not_log)
boxplot(logaritmic_data)
data_log <- read_tsv("./data/log_dataframe.tsv")
boxplot(data_log)
norm_data <- read.tsv("./data/dataset_normalized.tsv")
norm_data <- read_tsv("./data/dataset_normalized.tsv")
boxplot(norm_data)
norm_data <- norm_data %>%
dplyr::select(-UNIPROT,-Genes)
boxplot(norm_data)
imp_data <- read_tsv("./data/dataset_cml_imputed.tsv")
imp_data <- imp_data %>%
dplyr::select(-UNIPROT,-Genes)
boxplot(imp_data)
install.packages("cowplot")
install.packages("cowplot")
library(cowplot)
fold_change %>%
ggplot( aes(x = Fold_Change_values)) +
geom_density(fill = "#30D5C8", alpha = 0.8)
# In this script we want to calculate the fold change between
# R_Ctrl cells and S_Ctrl cells and create
# a density graph by identifying the median
# Load libraries
source("./script/0.libraries.R")
# Load data frame
data_imputed <- read_tsv("./data/dataset_cml_imputed.tsv")
# Divide data frame into the two groups of interest
R_Ctrl_1 <- data_imputed %>%
dplyr::select(starts_with("R_Ctrl"))
S_Ctrl_1 <- data_imputed %>%
dplyr::select(starts_with("S_Ctrl"))
#Calculate fold change by subtracting the average of the rows of the two data frames
fold_change <- as.tibble(rowMeans(R_Ctrl_1) - rowMeans(S_Ctrl_1))
# Change column name
fold_change <- fold_change %>%
dplyr::rename(Fold_Change_values = value)
# Bind fold change column to main data frame
data_imputed <- cbind(data_imputed, fold_change)
#=============================================
# Density plot
#=============================================
fold_change %>%
ggplot( aes(x = Fold_Change_values)) +
geom_density(fill = "#30D5C8", alpha = 0.8)
#=============================================
# Find the number of genes that have a fold-change in absolute value > 2
genes_greater <- data_imputed %>%
dplyr::filter(abs(data_imputed$Fold_Change_values) > 2)
#=============================================
# Density plot
#=============================================
median_value <- median(fold_change)
View(fold_change)
fold_change
#=============================================
# Density plot
#=============================================
median_value <- median(fold_change$Fold_Change_values)
fold_change %>%
ggplot( aes(x = Fold_Change_values)) +
geom_density(fill = "#30D5C8", alpha = 0.8) +
geom_vline(xintercept = median_value, color = "#FF0000")
# In this script we want to calculate the fold change between
# R_Ctrl cells and S_Ctrl cells and create
# a density graph by identifying the median
# Load libraries
source("./script/0.libraries.R")
# Load data frame
data_imputed <- read_tsv("./data/dataset_cml_imputed.tsv")
# Divide data frame into the two groups of interest
R_Ctrl_1 <- data_imputed %>%
dplyr::select(starts_with("R_Ctrl"))
S_Ctrl_1 <- data_imputed %>%
dplyr::select(starts_with("S_Ctrl"))
#Calculate fold change by subtracting the average of the rows of the two data frames
fold_change <- as.tibble(rowMeans(R_Ctrl_1) - rowMeans(S_Ctrl_1))
# Change column name
fold_change <- fold_change %>%
dplyr::rename(Fold_Change_values = value)
# Bind fold change column to main data frame
data_imputed <- cbind(data_imputed, fold_change)
#=============================================
# Density plot
#=============================================
median_value <- median(fold_change$Fold_Change_values)
fold_change %>%
ggplot( aes(x = Fold_Change_values)) +
geom_density(fill = "#30D5C8", alpha = 0.8) +
geom_vline(xintercept = median_value, color = "#FF0000")
#=============================================
# Find the number of genes that have a fold-change in absolute value > 2
genes_greater <- data_imputed %>%
dplyr::filter(abs(data_imputed$Fold_Change_values) > 2)
View(genes_greater)
densityplot(fold_change)
View(genes_greater)
View(data_imputed)
# Barplot of the number of genes before and after NA filtering
before_filtering <- read_tsv("./data/dataset_cml_UnID.tsv")
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(dplyr)
library(scales)
library(mice,warn.conflicts = F)
library(gtools)
library(cowplot)
# Barplot of the number of genes before and after NA filtering
before_filtering <- read_tsv("./data/dataset_cml_UnID.tsv")
before_filtering <- before_filtering %>%
relocate(UNIPROT)
after_filtering <- read_tsv("./data/dataset_cml_filtered.tsv")
names <- c("Before_filtering", "After_filtering")
values <- c(length(before_filtering$Genes), length(after_filtering$Genes))
barplot_df <- data.frame(names, values)
barplot(height = barplot_df$values, names = barplot_df$names)
not_log <- read_tsv("./data/not_log_dataframe.tsv")
not_log <- not_log %>%
dplyr::select(-UNIPROT,-Genes)
boxplot(not_log)
log_data <- read_tsv("./data/log_dataframe.tsv")
boxplot(log_data)
View(log_data)
View(not_log)
View(log_data)
norm_data <- read_tsv("./data/dataset_normalized.tsv")
boxplot(norm_data)
norm_data <- norm_data %>%
dplyr::select(-UNIPROT,-Genes)
boxplot(norm_data)
View(norm_data)
imp_data <- read_tsv("./data/dataset_cml_imputed.tsv")
imp_data <- imp_data %>%
dplyr::select(-UNIPROT,-Genes)
boxplot(imp_data)
before_filtering <- read_tsv("./data/dataset_cml_UnID.tsv")
View(before_filtering)
barplot <- barplot(height = barplot_df$values, names = barplot_df$names)
boxplot_1 <- boxplot(log_data)
boxplot_2 <- boxplot(norm_data)
boxplot <- boxplot(not_log)
boxplot_3 <- boxplot(imp_data)
plot_grid(boxplot, boxplot_1, boxplot_2, boxplot_3)
plot_grid(boxplot, boxplot_1, boxplot_2, boxplot_3, label = "AUTO")
help("plot_grid")
plot_grid(plotlist = list(boxplot, boxplot_1, boxplot_2, boxplot_3))
grid.arrange(boxplot, boxplot_1, boxplot_2, boxplot_3)
library(gridExtra)
grid.arrange(boxplot, boxplot_1, boxplot_2, boxplot_3)
grid.arrange(list(boxplot, boxplot_1, boxplot_2, boxplot_3))
boxplot
help("par")
View(boxplot)
BiocManager::install("DEP")
library("DEP")
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
dplyr::select(starts_with(-"R_ima",-"S_Ima")
warnings()
dplyr::select(starts_with("R_Ctrl","S_Ctrl")
View(init_data)
View(init_data)
relocate(UNIPROT, Genes)
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
init_data <- init_data %>%
dplyr::select(starts_with("R_Ctrl","S_Ctrl")) %>%
relocate(UNIPROT, Genes)
init_data <- init_data %>%
dplyr::select(starts_with("R_Ctrl","S_Ctrl"))
View(init_data)
# Select columns
init_data <- init_data %>%
dplyr::select(starts_with(("R_Ctrl") & ("S_Ctrl")))
# Select columns
init_data <- init_data %>%
dplyr::select(starts_with("R_Ctrl"))
View(init_data)
# Select columns
init_data <- init_data %>%
dplyr::select(starts_with("R_Ctrl" & "S_Ctrl"))
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
# Select columns
init_data <- init_data %>%
relocate(UNIPROT)
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(starts_with("R_Ctrl") | starts_with("S_Ctrl"))
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(UNIPROT, Genes, starts_with("R_Ctrl") | starts_with("S_Ctrl"))
# Select columns
init_data_1 <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(starts_with("R_Ctrl") | starts_with("S_Ctrl"))
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
# Select columns
init_data_1 <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(starts_with("R_Ctrl") | starts_with("S_Ctrl"))
View(init_data_1)
bind_cols(init_data_1, init_data$UNIPROT, init_data$Genes)
init_data_1 <- bind_cols(init_data_1, init_data$UNIPROT, init_data$Genes)
init_data_1 <- bind_cols(init_data_1, UNIPROT = init_data$UNIPROT, Genes = init_data$Genes)
# Select columns
init_data_1 <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(starts_with("R_Ctrl") | starts_with("S_Ctrl"))
init_data_1 <- bind_cols(init_data_1, UNIPROT = init_data$UNIPROT, Genes = init_data$Genes)
init_data_1 <- init_data %>%
relocate(UNIPROT, Genes)
init_data_1 <- init_data %>%
relocate(UNIPROT, Genes) %>%
dplyr::select(starts_with("R_Ctrl") | starts_with("S_Ctrl"))
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(starts_with("R_Ctrl") | starts_with("S_Ctrl"))
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(starts_with("R_Ctrl") | starts_with("S_Ctrl"))
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(-"R_Ima", -"S_Ima")
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(-starts_with('R_Ima'), -starts_with('S_Ima')))
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(-starts_with('R_Ima'), -starts_with('S_Ima'))
# Generate SummerizedExperiment object
R_Ctrl_columns <- grep("R_Ctrl", colnames(init_data))
S_Ctrl_columns <- grep("S_Ctrl", colnames(init_data))
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
data_se_parse <- make_se(init_data, R_Ctrl_columns, S_Ctrl_columns)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
class(init_data)
colnames(init_data)
class(R_Ctrl_columns)
class(S_Ctrl_columns)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
install.packages("DEP")
install.packages("DEP")
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DEP")
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DEP")
library(DEP)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DEP")
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
library(DEP)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
help("DEP")
library(DEP)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
help("make_se_parse")
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns)
View(init_data)
make_unique(init_data)
data_unique <- make_unique(init_data, "Genes", "UNIPROT", delim = ";")
View(data_unique)
data_unique <- data_unique %>%
relocate(name, ID)
data_unique <- data_unique %>%
relocate(name, ID)
# Select columns
init_data <- init_data %>%
dplyr::select(starts_with('R_Ctrl') | starts_with('S_Ctrl'))
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(dplyr)
library(scales)
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
# Select columns
init_data <- init_data %>%
dplyr::select(starts_with('R_Ctrl') | starts_with('S_Ctrl'))
data_unique <- make_unique(init_data, "Genes", "UNIPROT", delim = ";")
# Select columns
init_data <- init_data %>%
dplyr::select(-starts_with('R_Ima'), -starts_with('S_Ima'))
data_unique <- make_unique(init_data, "Genes", "UNIPROT", delim = ";")
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
# Select columns
init_data <- init_data %>%
dplyr::select(-starts_with('R_Ima'), -starts_with('S_Ima'))
data_unique <- make_unique(init_data, "Genes", "UNIPROT", delim = ";")
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(-starts_with('R_Ima'), -starts_with('S_Ima'))
# Load data
init_data <- read_tsv("./data/dataset_cml_UnID.tsv")
# Select columns
init_data <- init_data %>%
relocate(UNIPROT) %>%
dplyr::select(-starts_with('R_Ima'), -starts_with('S_Ima'))
data_unique <- make_unique(init_data, "Genes", "UNIPROT", delim = ";")
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns, S_Ctrl_columns)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns)
prova <- make_unique(init_data)
prova <- make_unique(init_data)
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns)
data_unique <- make_unique(init_data, "Genes", "UNIPROT", delim = ";")
data_se_parse <- make_se_parse(init_data, R_Ctrl_columns)
data_se_parse <- make_se_parse(data_unique, R_Ctrl_columns)
View(data_se_parse)
View(data_se_parse)
View(data_unique)
data_unique$UNIPROT <- NULL
data_unique$Genes <- NULL
View(init_data)
View(data_unique)
data_unique %>%
relocate(name, ID)
data_unique <- data_unique %>%
relocate(name, ID)
# Generate SummerizedExperiment object
proteomics_ExpDesign <- data.frame(label = paste0("R_Ctrl_", [1:3])
# Generate SummerizedExperiment object
proteomics_ExpDesign <- data.frame(label = paste0("R_Ctrl_", 1:3)
# Generate SummerizedExperiment object
proteomics_ExpDesign <- data.frame(label = paste0("R_Ctrl_", 1:3))
# Generate SummerizedExperiment object
proteomics_expdesign <- data.frame(label = paste0("R_Ctrl_", 1:3))
View(proteomics_expdesign)
# Generate SummerizedExperiment object
proteomics_expdesign <- data.frame(label = c(paste0("R_Ctrl_", 1:3), paste0("S_Ctrl_", 1:3)))
# Generate SummerizedExperiment object
proteomics_expdesign <- data.frame(label = c(paste0("R_Ctrl_", 1:3),
paste0("S_Ctrl_", 1:3)),
condition = c(paste0("R_Ctrl",3), paste0("S_Ctrl",3)))
# Generate SummerizedExperiment object
proteomics_expdesign <- data.frame(label = c(paste0("R_Ctrl_", 1:3),
paste0("S_Ctrl_", 1:3)),
condition = c(paste0("R_Ctrl",1:3), paste0("S_Ctrl",1:3)))
# Generate SummerizedExperiment object
proteomics_expdesign <- data.frame(label = c(paste0("R_Ctrl_", 1:3),
paste0("S_Ctrl_", 1:3)),
condition = c(paste0("R_Ctrl",1:3),
paste0("S_Ctrl",1:3)),
replicate = c(1:3,1:3))
data_se_parse <- make_se(data_unique, R_Ctrl_columns, S_Ctrl_columns, proteomics_expdesign)
data_se_parse <- make_se(data_unique, R_Ctrl_columns, S_Ctrl_columns, proteomics_expdesign)
data_se_parse <- make_se(data_unique, R_Ctrl_columns, S_Ctrl_columns, experimental_design)
View(data_se_parse)
data_se <- make_se(data_unique, R_Ctrl_columns, S_Ctrl_columns, experimental_design)
experimental_design <- proteomics_expdesign
data_se <- make_se(data_unique, R_Ctrl_columns, S_Ctrl_columns, experimental_design)
View(experimental_design)
View(init_data)
data_se <- make_se(data_unique, R_Ctrl_columns, S_Ctrl_columns, experimental_design)
# Generate SummerizedExperiment object
proteomics_expdesign <- data.frame(label = c(paste0("R_Ctrl_", 1:3),
paste0("S_Ctrl_", 1:3)),
condition = c(rep("R_Ctrl", each = 3)),
rep("S_Ctrl", each = 3)),
# Generate SummerizedExperiment object
proteomics_expdesign <- data.frame(label = c(paste0("R_Ctrl_", 1:3),
paste0("S_Ctrl_", 1:3)),
condition = c(rep("R_Ctrl", each = 3),
rep("S_Ctrl", each = 3)),
replicate = c(1:3,1:3))
View(proteomics_expdesign)
experimental_design <- proteomics_expdesign
data_se <- make_se(data_unique, R_Ctrl_columns, S_Ctrl_columns, experimental_design)
data_se <- make_se(data_unique, R_Ctrl_columns, experimental_design)
columns <- c(R_Ctrl_columns, S_Ctrl_columns)
data_se <- make_se(data_unique, columns, experimental_design)
View(data_se)
data_se
plot_frequency(data_se)
View(data_se)
data_se@colData
data_se@elementMetadata
data_filt <- filter_missval(data_se, thr = 1)
data_filt
plot_frequency(data_filt)
plot_frequency(data_se)
plot_frequency(data_filt)
data_filt <- filter_missval(data_se, thr = 0)
plot_frequency(data_filt)
# Filtering SE
data_filt <- filter_missval(data_se, thr = 5)
# Filtering SE
data_filt <- filter_missval(data_se, thr = 2)
plot_frequency(data_filt)
# Filtering SE
data_filt <- filter_missval(data_se, thr = 1)
plot_frequency(data_filt)
# Plot a barplot of the number of identified proteins per samples
plot_numbers(data_filt)
# Plot a barplot of the protein identification overlap between samples
plot_frequency(data_se)
# Filter for proteins that are identified
# in 2 out of 3 replicates of at least one condition
data_filt <- filter_missval(data_se, thr = 4)
# Filter for proteins that are identified
# in 2 out of 3 replicates of at least one condition
data_filt <- filter_missval(data_se, thr = 0)
plot_frequency(data_filt)
# Filter for proteins that are identified in all replicates of at least one condition
data_filt <- filter_missval(data_se, thr = 0)
plot_frequency(data_filt)
# Filter for proteins that are identified
# in 2 out of 3 replicates of at least one condition
data_filt <- filter_missval(data_se, thr = 1)
plot_frequency(data_filt)
# Plot a barplot of the number of identified proteins per samples
plot_numbers(data_filt)
plot_coverage(data_filt)
data_norm <- normalize_vsn(data_filt)
plot_normalization(data_norm, data_filt)
# Plot a heatmap of proteins with missing values
plot_missval(data_filt)
# Plot intensity distributions and cumulative fraction
# of proteins with and without missing values
plot_detect(data_filt)
# Impute missing data using random draws from a Gaussian
# distribution centered around a minimal value
# (for MNAR; missing not a random)
data_imp <- impute(data_norm, fun = "MinProb", q = 0.01)
plot_imputation(data_norm, data_imp)
# Visualize normalization by boxplots for all samples
# before and after normalization
plot_normalization(data_norm, data_filt)
# Plot a heatmap of proteins with missing values
plot_missval(data_filt)
# Plot intensity distributions and cumulative fraction
# of proteins with and without missing values
plot_detect(data_filt)
data_diff <- test_diff(data_imp, type = "control", control = "Ctrl")
data_diff <- test_diff(data_imp, type = "control", control = "R_Ctrl", "S_Ctrl")
data_diff <- test_diff(data_imp, type = "control", control = "R_Ctrl")
data_diff <- test_diff(data_imp, type = "all")
data_diff <- test_diff(data_imp, type = "manual", test = c("R_Ctrl_vs_S_Ctrl"))
BiocManager::install("limma")
data_diff <- test_diff(data_imp, type = "manual", test = c("R_Ctrl_vs_S_Ctrl"))
data_diff <- test_diff(data_imp, type = "manual", test = c("R_Ctrl_1_vs_S_Ctrl_1")
data_diff
data_diff
View(data_diff)
"R_Ctrl_3_vs_S_Ctrl_3")
data_diff <- test_diff(data_imp, type = "manual", test = c("R_Ctrl_1_vs_S_Ctrl_1",
"R_Ctrl_2_vs_S_Ctrl_2",
"R_Ctrl_3_vs_S_Ctrl_3"))
data_diff <- test_diff(data_imp, type = "manual", test = c("R_Ctrl_vs_S_Ctrl"))
data_diff <- test_diff(data_imp, type = "manual", test = c("R_Ctrl_1_vs_S_Ctrl_1"))
data_diff
data_diff <- test_diff(data_imp, type = "manual", test = c("R_Ctrl_1_vs_S_Ctrl_1"))
data_diff <- test_diff(data_imp, type = "all")
View(data_imp)
data_imp
data_imp@colData
data_imp@assays
data_imp@NAMES
data_imp@elementMetadata
data_imp@metadata
data_imp@elementMetadata@listData[["imputed"]]
plot_imputation(data_norm, data_imp)
