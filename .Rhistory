#Group 4
median10 <- median(log_data$S_Ima_1, na.rm = T)
median11 <- median(log_data$S_Ima_2, na.rm = T)
median12 <- median(log_data$S_Ima_3, na.rm = T)
norm1 <- log_data$R_Ctrl_1/median1
norm2 <- log_data$R_Ctrl_2/median2
norm3 <- log_data$R_Ctrl_3/median3
#Group 2
norm4 <- log_data$S_Ctrl_1/median4
norm5 <- log_data$S_Ctrl_2/median5
norm6 <- log_data$S_Ctrl_3/median6
#Group 3
norm7 <- log_data$R_Ima_1/median7
norm8 <- log_data$R_Ima_2/median8
norm9 <- log_data$R_Ima_3/median9
#Group 4
norm10 <- log_data$S_Ima_1/median10
norm11<- log_data$S_Ima_2/median11
norm12 <- log_data$S_Ima_3/median12
norm1
log_data$R_Ctrl_1 <- norm1
log_data$R_Ctrl_1 <- norm1
median1 <- median(log_data$R_Ctrl_1, na.rm = T)
median2 <- median(log_data$R_Ctrl_2, na.rm = T)
median3 <- median(log_data$R_Ctrl_3, na.rm = T)
#Group 2
median4 <- median(log_data$R_Ima_1, na.rm = T)
median5 <- median(log_data$R_Ima_2, na.rm = T)
median6 <- median(log_data$R_Ima_3, na.rm = T)
#Group 3
median7 <- median(log_data$S_Ctrl_1, na.rm = T)
median8 <- median(log_data$S_Ctrl_2, na.rm = T)
median9 <- median(log_data$S_Ctrl_3, na.rm = T)
#Group 4
median10 <- median(log_data$S_Ima_1, na.rm = T)
median11 <- median(log_data$S_Ima_2, na.rm = T)
median12 <- median(log_data$S_Ima_3, na.rm = T)
norm1 <- log_data$R_Ctrl_1/median1
norm2 <- log_data$R_Ctrl_2/median2
norm3 <- log_data$R_Ctrl_3/median3
#Group 2
norm4 <- log_data$R_Ima_1/median4
norm5 <- log_data$R_Ima_2/median5
norm6 <- log_data$R_Ima_3/median6
#Group 3
norm7 <- log_data$S_Ctrl_1/median7
norm8 <- log_data$S_Ctrl_2/median8
norm9 <- log_data$S_Ctrl_3/median9
#Group 4
norm10 <- log_data$S_Ima_1/median10
norm11 <- log_data$S_Ima_2/median11
norm12 <- log_data$S_Ima_3/median12
log_data$R_Ctrl_1 <- norm1
log_data$R_Ctrl_2 <- norm2
log_data$R_Ctrl_3 <- norm3
log_data$R_Ima_1 <- norm4
log_data$R_Ima_2 <- norm5
log_data$R_Ima_3 <- norm6
log_data$S_Ctrl_1 <- norm7
log_data$S_Ctrl_2 <- norm8
log_data$S_Ctrl_3 <- norm9
log_data$S_Ima_1 <- norm10
log_data$S_Ima_2 <- norm11
log_data$S_Ima_3 <- norm12
ggdensity(log_data, x = 'R_Ctrl_1', add = 'median')
ggdensity(log_data, x = 'R_Ctrl_1', add = 'mean')
# Control data
log_data1 <- proteomics_filtered[, -(1:2)]
log_data1 <- cbind(proteomics_filtered[, 1:2], log2(log_data1 + 1))
View(log_data1)
boxplot(log_data, main = "Before Normalization", xlab = "Genes",
ylab = "Expression", col = "orange")
boxplot(log_data)
boxplot(log_data1)
boxplot(as.numeric(log_data1))
ggplot(log_data1)
ggplot(log_data1, aes(x = "Genes", y = "Expression"),
geom_boxplot(fill = "blue"))
ggplot(log_data1, aes(x = Genes, y = "Expression"),
geom_boxplot(fill = "blue"))
ggplot(log_data1, aes(x = Genes, y = Expression),
geom_boxplot(fill = "blue"))
ggplot(log_data1, aes(x = Genes, y = Expression, fill = "blue"))
ggplot(log_data1, aes(x = "Genes", y = "Expression", fill = "blue"))
# Control data
log_data1 <- proteomics_filtered[, -(1:2)]
boxplot(log_data1)
log_data1 <- cbind(proteomics_filtered[, 1:2], log2(log_data1 + 1))
log_data2 <- log_data1[, -(1:2)]
boxplot(log_data2)
only_values_norm <- log_data[, -(1:2)]
boxplot(only_values_norm)
View(only_values_norm)
boxplot(only_values_norm)
boxplot(log_data2)
boxplot(only_values_norm)
data_norm <- proteomics_filtered[, -(1:2)]
# Transform to logaritmic form and then unify the other 2 columns
data_norm <- cbind(proteomics_filtered[, 1:2], log2(log_data + 1))
# Group 1
median1 <- median(data_norm$R_Ctrl_1, na.rm = T)
median2 <- median(data_norm$R_Ctrl_2, na.rm = T)
median3 <- median(data_norm$R_Ctrl_3, na.rm = T)
#Group 2
median4 <- median(data_norm$R_Ima_1, na.rm = T)
median5 <- median(data_norm$R_Ima_2, na.rm = T)
median6 <- median(data_norm$R_Ima_3, na.rm = T)
#Group 3
median7 <- median(data_norm$S_Ctrl_1, na.rm = T)
median8 <- median(data_norm$S_Ctrl_2, na.rm = T)
median9 <- median(data_norm$S_Ctrl_3, na.rm = T)
#Group 4
median10 <- median(data_norm$S_Ima_1, na.rm = T)
median11 <- median(data_norm$S_Ima_2, na.rm = T)
median12 <- median(data_norm$S_Ima_3, na.rm = T)
# Divide each column with the value of its median to obtain normalized values
#Group 1
norm1 <- data_norm$R_Ctrl_1/median1
norm2 <- data_norm$R_Ctrl_2/median2
norm3 <- data_norm$R_Ctrl_3/median3
#Group 2
norm4 <- data_norm$R_Ima_1/median4
norm5 <- data_norm$R_Ima_2/median5
norm6 <- data_norm$R_Ima_3/median6
#Group 3
norm7 <- data_norm$S_Ctrl_1/median7
norm8 <- data_norm$S_Ctrl_2/median8
norm9 <- data_norm$S_Ctrl_3/median9
#Group 4
norm10 <- data_norm$S_Ima_1/median10
norm11 <- data_norm$S_Ima_2/median11
norm12 <- data_norm$S_Ima_3/median12
# Change values in the table
data_norm$R_Ctrl_1 <- norm1
data_norm$R_Ctrl_2 <- norm2
data_norm$R_Ctrl_3 <- norm3
data_norm$R_Ima_1 <- norm4
data_norm$R_Ima_2 <- norm5
data_norm$R_Ima_3 <- norm6
data_norm$S_Ctrl_1 <- norm7
data_norm$S_Ctrl_2 <- norm8
data_norm$S_Ctrl_3 <- norm9
data_norm$S_Ima_1 <- norm10
data_norm$S_Ima_2 <- norm11
data_norm$S_Ima_3 <- norm12
# Boxplot with normalized values
only_values_norm <- data_norm[, -(1:2)]
boxplot(only_values_norm)
only_values_norm <- data_norm[, -(1:2)]
boxplot(only_values_norm)
boxplot(only_values_norm)
boxplot(only_values_norm)
View(data_norm)
# Transform to logaritmic form and then unify the other 2 columns
data_norm <- cbind(proteomics_filtered[, 1:2], log2(log_data + 1))
# Transform to logaritmic form and then unify the other 2 columns
data_norm <- cbind(proteomics_filtered[, 1:2], log2(data_norm + 1))
boxplot(only_values_norm)
only_values_norm <- data_norm[, -(1:2)]
boxplot(only_values_norm)
boxplot(log_data2)
boxplot(only_values_norm)
library(scales)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm <- proteomics_filtered %>%
select(-UNIPROT, -GENES) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log1p(.))) %>%
boxplot(data_norm)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm <- proteomics_filtered %>%
select(-UNIPROT, -GENES) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log1p(.))) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log1p(.))) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
View(data_norm)
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
dati_norm <- cbind(data_norm[, c("UNIPROT", "GENES")], dati_norm)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log1p(.))) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
dati_norm <- cbind(proteomics_filtered[, c("UNIPROT", "GENES")], data_norm1)
View(data_norm)
View(data_norm1)
View(data_norm)
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
data_norm <- cbind(proteomics_filtered[, c("UNIPROT", "GENES")], data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log1p(.))) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
View(data_norm1)
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
data_norm <- cbind(proteomics_filtered[, c("UNIPROT", "GENES")], data_norm1)
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
data_norm <- cbind(proteomics_filtered[, c("UNIPROT", "Genes")], data_norm1)
View(data_norm)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(.))) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
data_norm <- cbind(proteomics_filtered[, c("UNIPROT", "Genes")], data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(proteomics_filtered))) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(.) + 1)) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(proteomics_filtered) + 1)) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(proteomics_filtered + 1))) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes)%>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# boxplot(data_norm)
# Apply normalization
mutate(across(everything(), scale))
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
data_norm <- cbind(proteomics_filtered[, c("UNIPROT", "Genes")], data_norm1)
View(data_norm)
boxplot(data_norm)
boxplot(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
boxplot(data_norm1)
boxplot(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
boxplot(data_norm1)
boxplot(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# boxplot(data_norm1)
# Apply normalization
mutate(across(everything(), scale))
boxplot(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
boxplot(data_norm1)
boxplot(data_norm1)
box_norm <- boxplot(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), scale))
box_norm <- boxplot(data_norm1)
data_log1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
mutate(across(everything(), ~log2(. + 1)))
View(box_norm)
View(data_log1)
# Box plot with logaritmic values
box_log <- boxplot(data_log1)
# BOx plot with normalized values
box_norm <- boxplot(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(),  ~./median(.)))
View(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), ~ifelse(median(.) != 0, ./median(.), 0)))
View(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), ~./median(.))))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), ~./median(.)))
View(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), scale))
View(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), ./median(., na.rm = T)))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), ./median(na.rm = T)))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), ./median(.,na.rm = T)))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), ./median(.), na.rm = T))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), ./median(.)))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), function(x) ifelse(median(x) != 0, x/median(x), x)))
View(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), function(x) ifelse(median(x, na.rm = T) != 0, x/median(x, na.rm = T), x)))
View(data_norm1)
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), function(x) ifelse(median(x, na.rm = F) != 0, x/median(x, na.rm = F), x)))
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
data_norm1 <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization
mutate(across(everything(), function(x) ifelse(median(x, na.rm = T) != 0, x/median(x, na.rm = T), x)))
# Supponiamo che 'dati' sia il tuo dataframe
dati_normalizzati <- proteomics_filtered %>%
# Seleziona solo le colonne numeriche (escludendo 'UNIPROT' e 'GENES')
select_if(is.numeric) %>%
# Applica la normalizzazione dividendo per la mediana
mutate(across(everything(), ~./median(., na.rm = TRUE)))
View(dati_normalizzati)
View(proteomics_filtered)
# Supponiamo che 'dati' sia il tuo dataframe
dati_normalizzati <- proteomics_filtered %>%
# Seleziona solo le colonne numeriche (escludendo 'UNIPROT' e 'GENES')
select_if(is.numeric) %>%
# Trasforma in forma logaritmica
mutate(across(everything(), ~log2(. + 1))) %>%
# Applica la normalizzazione dividendo per la mediana
mutate(across(everything(), ~./median(., na.rm = TRUE)))
View(dati_normalizzati)
# Supponiamo che 'dati' sia il tuo dataframe
normalized_data <- proteomics_filtered %>%
# Seleziona solo le colonne numeriche (escludendo 'UNIPROT' e 'GENES')
select_if(is.numeric) %>%
# Trasforma in forma logaritmica
mutate(across(everything(), ~log2(. + 1))) %>%
# Applica la normalizzazione dividendo per la mediana
mutate(across(everything(), ~./median(., na.rm = TRUE)))
# Supponiamo che 'dati' sia il tuo dataframe
normalized_data <- proteomics_filtered %>%
# Seleziona solo le colonne numeriche (escludendo 'UNIPROT' e 'GENES')
select_if(is.numeric) %>%
# Trasforma in forma logaritmica
mutate(across(everything(), ~log2(. + 1))) %>%
# Applica la normalizzazione dividendo per la mediana
mutate(across(everything(), ~./median(., na.rm = TRUE)))
View(normalized_data)
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
data_normalized <- cbind(proteomics_filtered[, c("UNIPROT", "Genes")], data_normalized)
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
data_normalized <- cbind(proteomics_filtered[, c("UNIPROT", "Genes")], normalized_data)
View(data_normalized)
# BOx plot with normalized values
box_norm <- boxplot(normalized_data)
# Creating data frame with logaritmic values for boxplot
logaritmic_data <- proteomics_filtered %>%
dplyr::select(-UNIPROT, -Genes) %>%
mutate(across(everything(), ~log2(. + 1)))
# Box plot with logaritmic values
box_log <- boxplot(logaritmic_data)
# BOx plot with normalized values
box_norm <- boxplot(normalized_data)
# In this script we want to change the values in the table
# and put them in logarithmic form (log2 x + 1), then we impute with 'mice'
source("./script/0.libraries.R")
#===========================================================
# Transform in logaritmic form and data normalizing
# ==========================================================
normalized_data <- proteomics_filtered %>%
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
select_if(is.numeric) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization dividing by the median
mutate(across(everything(), ~./median(., na.rm = TRUE)))
read_tsv("./data/dataset_cml_filtered.tsv")
proteomics <- read_tsv("./data/dataset_cml_filtered.tsv")
normalized_data <- proteomics %>%
# Select only the columns of interest (excluding 'UNIPROT' and 'GENES')
select_if(is.numeric) %>%
# Apply logarithmic transformation
mutate(across(everything(), ~log2(. + 1))) %>%
# Apply normalization dividing by the median
mutate(across(everything(), ~./median(., na.rm = TRUE)))
# Join the 'UNIPROT' and 'GENES' columns to the normalized dataframe
data_normalized <- cbind(proteomics[, c("UNIPROT", "Genes")], normalized_data)
# Creating data frame with logaritmic values for boxplot
logaritmic_data <- proteomics %>%
dplyr::select(-UNIPROT, -Genes) %>%
mutate(across(everything(), ~log2(. + 1)))
# Box plot with logaritmic values
box_log <- boxplot(logaritmic_data)
# BOx plot with normalized values
box_norm <- boxplot(normalized_data)
View(data_normalized)
View(logaritmic_data)
View(normalized_data)
View(logaritmic_data)
View(data_normalized)
View(data_normalized)
View(logaritmic_data)
